import { GigaChat } from './gigachat/index.js';
import { updateUsage } from './usage.mjs';
import { ICompletionRequest } from 'gigachat-node/interfaces/completion.js';
import { setTimeout } from 'timers/promises';
import pLimit from 'p-limit'

// ENV variables
// GIGACHAT_CLIENT_ID
// GIGACHAT_CLIENT_SECRET
const {
  GIGACHAT_CLIENT_SECRET,
  GIGACHAT_CLIENT_ID,
} = process.env

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const client = new GigaChat(
  GIGACHAT_CLIENT_SECRET,
  GIGACHAT_CLIENT_ID,
  true,
  true,
  true,
  false
);

// Gigachat API rate limit concurency
const limit = pLimit(1)

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param messages - –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ–ª—å—é
 * @param model - –ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
 * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ª–∏–±–æ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function createCompletention(
  options: Pick<ICompletionRequest, 'messages' | 'temperature' | 'model' > & {response_format?: any}
) {
  return limit(async () => {
    // Rate limit API ü•≤
    await setTimeout(1000);
    
    // @ts-ignore
    delete options['response_format'];
    
    const {model, messages, } = options
    
    const response = await client.completion({
      ...options,
      max_tokens: 2048 * 8,
    });
  
  
    if (response.usage) {
      updateUsage(response.usage, model!)
    }
    
    return response;
  })
}
