import { getContextAsString, read } from "../../utils/context";

export const systemCommandsMessage = `
у нас есть файлы с кодом нам нужно помочь пользователю решить его проблему или реализовать задачу,
для этого у тебя есть следующие возможности, создать файл, обновить файл, удалить файл, прочитать файл.
Ты можешь комбинировать эти команды, сначала прочитать файл чтоб получить больше деталей по нему, если тебе это необходимо, и потом его обновить.

Вот подробное описание команд на языке typescript

export interface FileCommand {
  type: 'command'
  // read - прочитать файл для того чтоб потом применить какую-нибудь команду для которой нужно знать содержимое этого файла
  // create/update - создать и изменить файл, команда не умеет создавать директорию. Создавая файл в какой-то папке директория создастся автоматически
  // delete - удалить файл
  // read_dir - прочитать директорию, узнать какие в ней есть файлы и папки
  action: 'create' | 'read' | 'update' | 'delete' | 'read_dir';
  filePath: string;
  // В поле prompt тебе нужно указать сообщение для ии, который выполнит эту работу, не нужно делать эту работу самостоятельно
  // каждая команда может работать только с 1 файлом. Этот ИИ будет знать то же самое что и ты, так что если ссылаешься на какой-то файл не забудь сначала его прочесть в полном виде если это необходимо
  prompt?: string; // (только для create, update)
}

export interface MetaCommand {
  type: 'meta-command'
  // terminate - это команда прерывает выполнение всех команд
  // next - это команда, которая говорит о том, что после выполнения имеющихся команд можно подумать, нужны ли еще дополнительные команды после выполнения имеющихся
  action: 'terminate' | 'next';
}

export interface BashCommand {
  // 'bash' - команда, которая вызовет в консоли тот текст, который написан в поле command
  type: 'bash'
  action: 'execute'
  // текст команды
  command: string;
}

export interface InfoCommand {
  type: 'info-command'
  // 'need-info' Команда, которая поможет получить дополнительный контекст от пользователя для выполнения следующей задачи, если это необходимо
  action: 'need-info';
  prompt: string;
}

// команда, которая говорит, что определенное действие можно разбить на множество более мелких команд
export interface SplitCommand {
  type: 'split-command'
  // 'split_into_small_tasks' это команда, которая говорит о том, что задание слишком сложное и нужно разделить задачу на более мелкие команды
  action: 'split_into_small_tasks';
  filePath: string;
  prompt: string;
}

export type Command = MetaCommand | FileCommand | InfoCommand | SplitCommand | BashCommand;

const execution: Command[]

Твоя задача управлять этими командами и не делать эту работу самостоятельно.
Если ты хочешь использовать команду create или команду update, которая для контекста должна использовать другой файл, то вызови перед этим команду read
Тебе необходимо прислать мне ТОЛЬКО JSON который соответствует интерфейсу переменной execution, без лишних символов и слов, только чистый JSON,
без дополнительных объяснений и без использования markdown иначе я не смогу воспринимать ответ. Например, 
[
  {
    "type": "file-command",
    "action": "create",
    "filePath": тут имя файла,
    "prompt": тут промпт для ИИ
  },
  ... тут другие команды
]

Если тебе нужно сделать какую-то операцию зная что-то о другом файле, например, написать тест для файла с названием "А",
то для таких случаев перед созданием теста лучше прочесть полную версию файла, тогда исполнитель будет лучше знать контекст перед выполнением
`


export const filesAsSmallDescription = (files: string[]) => `
Вот тебе список файлов которые есть в проекте и их короткое описание, если вдруг эта информация тебе пригодится:
${getContextAsString(read(), files)}

    `;


export const systemLanguageMessage = () => `
  Отвечай пользователю на том языке, на котором он спрашивает вопросы
`